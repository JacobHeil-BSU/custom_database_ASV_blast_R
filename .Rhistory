install.packages("swirl")
library("swirl")
swirl()
library("swirl")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
install.packages(c(“tidyverse”, “ggplot2”))
install.packages(c(“tidyverse”, “ggplot2”))
install.packages(“tidyverse”)
install.packages("tidyverse")
install.packages("ggplot2")
swirl()
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir <- "/home/chadwick"
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename()
file.rename("mytest.R")
file.rename("mytest.R" to "mytest2.R")
file.rename("mytest.R to mytest2.R")
file.rename("mytest.R" "mytest2.R")
?file.rename
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir3") file.path("testdir2","testdir3", recursive = TRUE)
dir.create("file.path("testdir2","testdir3", recursive = TRUE)")
dir.create(file.path("testdir2","testdir3", recursive = TRUE))
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
setwd("old.dir")
setwd(old.dir)
tidyverse()
install.packages("tidyverse")
install.packages("tidyverse")
tidyverse::
?tidyverse
swirl()
library("swirl")
swirl()
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "chadwick")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), collapse = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
5
swirl()
x <- c(44, NA, 5, NA)
3*x
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
#Set up your R Environment
#install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = './')
#Install and load some essential package managers
#install.packages("BiocManager")
library(BiocManager)
#install.packages("devtools")
library(devtools)
#Install and load some essential packages
#BiocManager::install("phyloseq", force=TRUE)
library(phyloseq)
#BiocManager::install("decontam")
library(decontam)
#devtools::install_github("gauravsk/ranacapa")
library(ranacapa)
library(ggplot2)
#install.packages("dplyr")
library(dplyr)
#install.packages("RColorBrewer")
library("RColorBrewer")
phyloseq_16S <- readRDS("./PH_phyloseq_16S.rds")
#Look at how many samples, OTU, taxa etc.
phyloseq_16S
phyloseq_16S_rarefied <- readRDS("./phyloseq_16S_rare.rds")
## Filter out non-bacterial samples, including archaea and unassigned organisms.
phyloseq_16s_bact<-subset_taxa(phyloseq_16S, Kingdom == "d__Bacteria")
#Look at how this may have changed the object.
phyloseq_16s_bact # notice there are now 3375 taxa instead of 3389.
## Code below for decontamination.
# Designate negative control samples
sample_data(phyloseq_16s_bact)$is.neg <- sample_data(phyloseq_16s_bact)$empo_2 == "Negative"
# Identify contaminants with "prevalence" method and threshold set to 0.5.
contam.prev <- decontam::isContaminant(phyloseq_16s_bact,
method = "prevalence",
neg = "is.neg",
threshold = 0.5)
# Investigate how many ASVs were identified as contaminants (TRUE)
table(contam.prev$contaminant) #278 contaminants.
# Remove contaminant ASVs from phyloseq object
phyloseq_16S_decom <- phyloseq::prune_taxa(!contam.prev$contaminant, phyloseq_16s_bact)
# Confirm contaminant ASVs have been removed
phyloseq_16S_decom # notice there are now 3097 taxa instead of 3375
# Remove samples that are blanks.
phyloseq_16S_no_blank <- subset_samples(phyloseq_16S_decom, empo_2 == "Animal") #get rid of blanks/controls
phyloseq_16S_no_blank # Notice there are now 165 samples instead of 173.
# There are a few pronghorn in here that are suspicious to the researcher in charge of this data set (i.e., there is no physical paper metadata sheet found for these individuals). We are going to remove them here.
phyloseq_16S_good_pronghorn <- subset_samples(phyloseq_16S_no_blank, data_issues == "n")
phyloseq_16S_good_pronghorn # Notice we are now at 159 samples instead of 165.
# First, look at how many reads are in each sample
sort(colSums(otu_table(phyloseq_16s_bact))) # Bacterial reads only before decontamination and all subsetting- 4 actual samples are below 5000 threshold, 5 blanks, 14.067, 14.028, 14.029, 13.116
sort(colSums(otu_table(phyloseq_16S_good_pronghorn))) # after docontam and all subsetting 6 actual samples below 5000 threshold... 14.067, 14.028, 14.029, 13.116, 13.025, 14.079
# Make a rarefaction curve to visualize ASV detection at different read coverages.
rarefaction_curve <-
ranacapa::ggrare(phyloseq_16S_good_pronghorn, step = 100, color = "study_area", se = FALSE) +
ggplot2::geom_vline(xintercept = 4966, linetype = "dashed", size=2) +
ggplot2::theme_bw()
rarefaction_curve + ggplot2::theme(text = ggplot2::element_text(size = 12)) # I think the second line is supposed to create a vertical line at rarefaction point but it does not...
View#This is the code to remove the 4 lower samples.
phyloseq_16S_rarify1 <- phyloseq::subset_samples(phyloseq_16S_good_pronghorn, capture_kit != "14-067")
phyloseq_16S_rarify1#check
phyloseq_16S_rarify2 <- phyloseq::subset_samples(phyloseq_16S_rarify1, capture_kit != "14-028")
phyloseq_16S_rarify2 #check
phyloseq_16S_rarify3 <- phyloseq::subset_samples(phyloseq_16S_rarify2, capture_kit != "14-029")
phyloseq_16S_rarify3 #check
phyloseq_16S_rarify4 <- phyloseq::subset_samples(phyloseq_16S_rarify3, capture_kit != "13-116")
phyloseq_16S_rarify4 #check
sort(colSums(otu_table(phyloseq_16S_rarify4)))
# Rarefy samples to 4966 reads/sample, which removed samples first so lowest is 4966.
phyloseq_16S_rare <- phyloseq::rarefy_even_depth(phyloseq_16S_rarify4, sample.size = 4966, rngseed = 223) #Note seed was 223
sort(colSums(otu_table(phyloseq_16S_rare))) # All read counts are the same at 4966.
# Save this phyloseq object.
saveRDS(phyloseq_16S_rare, "phyloseq_16S_rare.rds")
#Make a richness table with diversity indices.
alpha_full <- data.frame(estimate_richness(phyloseq_16S_rare,
split = TRUE,
measures = NULL))
#Create column in richness_full to join by that is sample name, create new object with this column... richness_full to alpha.
alpha<-alpha_full
alpha<- tibble::rownames_to_column(alpha, "sample_name")#create colum
alpha$sample_name<-gsub("X","", as.character(alpha$sample_name))
row.names(alpha) <- alpha$sample_name
#Join metadata to species richness data
meta<-data.frame(sample_data(phyloseq_16S_rare))
alpha_meta<- dplyr::left_join(alpha, meta)
# Create a plot for Shannon Diversity across your variable of choice. Just replace 'study_area' with one of the variables listed above. You can change the color of your plots using different palettes with color brewer on line 185 (see lists of palettes at http://applied-r.com/wp-content/uploads/2013/12/Plot126b.png).
#install.packages("viridis")
library("viridis")
shannon <-
ggplot(alpha_meta, aes(adj_age, Shannon, color = adj_age)) +
geom_boxplot() +
geom_jitter(position = position_jitterdodge(jitter.width = 0)) +
scale_fill_viridis("Viridis") +
xlab("Adjusted Age") +
ylab("Shannon Diversity") +
theme_bw()
shannon + labs(title="Shannon index by Adjusted Age", x="Adjusted Age", y="Shannon Diversity") + theme(text=element_text(size=10))
library(swirl)
swirl()
remainder <- function(num, divisor) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
#set working directory
setwd("~/Desktop/Module_02_Coding_in_R")
exit
q
quit
#set working directory
setwd("~/Desktop/Module_02_Coding_in_R")
#set working directory
setwd("~/Desktop/Module_02_Coding_in_R")
setwd("/home/chadwick/Documents/C3VIP/taxonomyBLAST")
library(Biostrings)
library(rBLAST)
bl = blast(db = "./ITS_RefSeq_Fungi/ITS_RefSeq_Fungi", type = "blastn")
seq <- readDNAStringSet("DryCreek_ITS_ASVs.fasta")
cl <- predict(bl, seq[1])
cl <- predict(bl, seq[1,2])
cl[1:5,]
cl <- predict(bl, seq)
cl[1:5,]
